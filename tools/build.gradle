apply plugin: 'java'
apply plugin: 'eclipse'

eclipse.project.name = 'bitcoinj-tools'

dependencies {
    implementation project(':core')
    implementation 'com.google.guava:guava:27.0.1-android'
    implementation 'net.sf.jopt-simple:jopt-simple:5.0.4'
    implementation 'org.slf4j:slf4j-jdk14:1.7.25'
}

sourceCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

task wallet_tool(type: JavaExec) {
    description = 'Print and manipulate wallets.'
    main = 'org.bitcoinj.tools.WalletTool'
    if (project.hasProperty('appArgs') && appArgs.length() > 0)
        args = Arrays.asList(appArgs.split("\\s+"))
    classpath = sourceSets.main.runtimeClasspath
}

task uberJar(type: Jar) {
    archiveClassifier = 'uber'
    manifest {
        attributes 'Implementation-Title': 'Wallet Tool fat JAR',
        'Main-Class': 'org.bitcoinj.tools.WalletTool'
        //'Class-Path' : sourceSets.main.runtimeClasspath.findAll { it.name.endsWith('.jar')}.join(' ')
    }
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
         configurations.runtimeClasspath.findAll {it.name.endsWith('.jar')}.collect {zipTree(it)}
    }
    { exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA' }
}

task build_checkpoints(type: JavaExec) {
    description = 'Create checkpoint files to use with CheckpointManager.'
    main = 'org.bitcoinj.tools.BuildCheckpoints'
    if (project.hasProperty('appArgs') && appArgs.length() > 0)
        args = Arrays.asList(appArgs.split("\\s+"))
    classpath = sourceSets.main.runtimeClasspath
}